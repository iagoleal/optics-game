// Generated by CoffeeScript 1.6.3
(function() {
  var Button, Interface, Turner;

  Interface = (function() {
    Interface.prototype.width = 0;

    Interface.prototype.height = 0;

    Interface.prototype.context = null;

    Interface.prototype.turner = null;

    function Interface(cv) {
      var canvas;
      canvas = document.getElementById(cv);
      this.context = canvas.getContext("2d");
      this.width = canvas.width;
      this.height = canvas.height;
    }

    Interface.prototype.pointTo = function(pos) {
      if (this.turner) {
        return this.turner.pointTo(pos);
      }
    };

    Interface.prototype.draw = function() {
      this.context.clearRect(0, 0, this.width, this.height);
      this.context.fillStyle = "blue";
      this.context.strokeStyle = "blue";
      if (this.turner) {
        return this.turner.draw(this.context);
      }
    };

    return Interface;

  })();

  Button = (function() {
    Button.prototype.position = null;

    Button.prototype.click = null;

    Button.prototype.radius = 10;

    function Button(pos, click) {
      if (pos == null) {
        pos = {
          x: 0,
          y: 0
        };
      }
      this.click = click;
      this.position = {
        x: pos.x,
        y: pos.y
      };
      if (!click) {
        click = (function() {
          return null;
        });
      }
    }

    Button.prototype.collided = function(point) {
      return dist2(this.position, point) <= this.radius * this.radius;
    };

    Button.prototype.draw = function(context) {
      return drawer.arc(context, "fill", this.position, 0, 2 * Math.PI, this.radius, {
        color: '#fff'
      });
    };

    return Button;

  })();

  Turner = (function() {
    Turner.prototype.turnable = null;

    Turner.prototype.radius = 0;

    function Turner(turnable) {
      this.turnable = turnable != null ? turnable : {
        x: 0,
        y: 0
      };
      this.radius = (function() {
        switch (false) {
          case !("radius" in this.turnable):
            return this.turnable.radius;
          case !("width" in this.turnable):
            return this.turnable.width / 2;
        }
      }).call(this);
    }

    Turner.prototype.pointTo = function(pos) {
      var center, dx, dy;
      center = this.turnable.position;
      if (Physics.Collision.circle(pos, center, this.radius + 40)) {
        dy = center.y - pos.y;
        dx = center.x - pos.x;
        return this.turnable.turnTo(Math.atan2(dy, dx) + Math.PI / 2);
      }
    };

    Turner.prototype.draw = function(context) {
      var radius;
      radius = (function() {
        switch (false) {
          case !("radius" in this.turnable):
            return this.turnable.radius;
          case !("width" in this.turnable):
            return this.turnable.width / 2;
        }
      }).call(this);
      return drawer.arc(context, "stroke", this.turnable.position, 0, 2 * Math.PI, radius + 20, {
        color: "rgba(255, 255, 255, 0.5",
        width: 15
      });
    };

    return Turner;

  })();

  window.Turner = Turner;

  window.Interface = Interface;

}).call(this);
