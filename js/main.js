// Generated by CoffeeScript 1.6.3
(function() {
  var Board, mainLoop;

  Board = (function() {
    Board.prototype.canvas = null;

    Board.prototype.context = null;

    Board.prototype.bgContext = null;

    Board.prototype.width = 0;

    Board.prototype.height = 0;

    Board.prototype.gun = null;

    Board.prototype.mirrors = null;

    Board.prototype.laser = null;

    Board.prototype.shoted = false;

    function Board(cv) {
      var bcanvas;
      this.canvas = document.getElementById(cv);
      this.context = this.canvas.getContext("2d");
      bcanvas = document.getElementById('bground');
      this.bgContext = bcanvas.getContext("2d");
      this.width = this.canvas.width;
      this.height = this.canvas.height;
      this.context.fillStyle = 'white';
      this.context.strokeStyle = 'white';
      this.bgContext.fillStyle = 'black';
      this.bgContext.fillRect(0, 0, this.width, this.height);
      this.gun = new LaserGun({
        x: this.width / 2,
        y: this.height / 2
      }, 0);
      this.laser = new Laser(this.gun.position);
      this.mirrors = [];
    }

    Board.prototype.shot = function(pos) {
      var dx, dy;
      dx = pos.x - this.gun.position.x;
      dy = pos.y - this.gun.position.y;
      this.shoted = true;
      this.gun.angle = Math.atan2(dy, dx) * 180 / Math.PI;
      console.log(this.gun.angle, dy / dx);
      this.laser.clear(this.gun.position, this.gun.front());
      this.laser.advance();
      return this.laser.path[0] = this.gun.front();
    };

    Board.prototype.recalculate = function() {
      var a;
      if (this.laser.path.length >= 2) {
        this.laser.clear(this.gun.position, this.gun.front());
        while (this.collided(this.laser.last()) !== "wall") {
          this.laser.advance(1);
          a = this.collided(this.laser.last());
          if (a && a.type === "Mirror") {
            this.reflect(a);
          }
        }
        return this.laser.path[0] = this.gun.front();
      }
    };

    Board.prototype.reflect = function(mirror) {
      var angle, dx, dy, pos, slope, _ref;
      _ref = this.laser.changeRate(), dy = _ref[0], dx = _ref[1];
      angle = mirror.reflect(this.laser.angle());
      pos = this.laser.last();
      slope = Math.abs(Math.tan(angle * Math.PI / 180));
      pos.x += dx > 0 ? 10 : -10;
      pos.y += dy > 0 ? -10 * slope : 10 * slope;
      return this.laser.addPoint(pos);
    };

    Board.prototype.collided = function(pos) {
      var m, _i, _len, _ref;
      if (pos.x <= 0 || pos.x >= this.width || pos.y <= 0 || pos.y >= this.height) {
        return "wall";
      }
      _ref = this.mirrors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        if (m.collided(pos)) {
          return m;
        }
      }
      return null;
    };

    Board.prototype.addMirror = function(pos, angle) {
      if (angle == null) {
        angle = 0;
      }
      return this.mirrors.push(new PlaneMirror(pos, angle));
    };

    Board.prototype.draw = function() {
      var mirror, _i, _len, _ref;
      this.canvas.width = this.canvas.width;
      _ref = this.mirrors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mirror = _ref[_i];
        mirror.draw(this.context);
      }
      this.gun.draw(this.context);
      return this.laser.draw(this.context);
    };

    Board.prototype.animate = function() {
      var coll, i, m, _i, _len, _ref,
        _this = this;
      coll = this.collided(this.laser.last());
      if (!coll && this.shoted) {
        i = 0;
        while (!coll && i < 5) {
          this.laser.advance(1);
          i++;
        }
      } else {
        if (coll && coll.type === "Mirror") {
          this.reflect(coll);
        } else {
          this.shoted = false;
          this.recalculate();
        }
      }
      _ref = this.mirrors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        m.turn(0);
      }
      return setTimeout(function() {
        return _this.animate();
      }, 1000 / 1000);
    };

    return Board;

  })();

  window.onload = function() {
    var _this = this;
    window.board = new Board("board");
    window.board.addMirror({
      x: 600,
      y: 70
    }, 0);
    window.board.addMirror({
      x: 200,
      y: 70
    }, 0);
    window.board.addMirror({
      x: 200,
      y: 600 - 70
    }, 180);
    window.board.addMirror({
      x: 600,
      y: 600 - 70
    }, 180);
    window.board.animate();
    document.getElementById('board').addEventListener('click', function(e) {
      var pos;
      pos = {
        x: e.pageX - board.canvas.offsetLeft,
        y: e.pageY - board.canvas.offsetTop
      };
      return board.shot(pos);
    });
    return requestAnimationFrame(mainLoop);
  };

  mainLoop = function() {
    var fps;
    if (typeof mainLoop.lastTime === 'undefined') {
      mainLoop.lastTime = new Date().getTime();
    } else {
      fps = 1000 / (new Date().getTime() - mainLoop.lastTime);
      document.getElementById("fps").innerHTML = fps.toFixed(2) + ' fps';
      mainLoop.lastTime = new Date().getTime();
    }
    window.board.draw();
    return requestAnimationFrame(mainLoop);
  };

  window.requestAnimationFrame = (function() {
    return window.requestAnimationFrame || window.webkitrequestAnimationFrame || window.mozrequestAnimationFrame || function(cback) {
      return window.setTimeout(cback, 1000 / 60);
    };
  })();

}).call(this);
