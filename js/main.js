// Generated by CoffeeScript 1.6.3
(function() {
  var Board, Interface, mainLoop;

  Board = (function() {
    Board.prototype.canvas = null;

    Board.prototype.context = null;

    Board.prototype.width = 0;

    Board.prototype.height = 0;

    Board.prototype.guns = null;

    Board.prototype.mirrors = null;

    Board.prototype.obstacles = null;

    Board.prototype.stars = null;

    Board.prototype.selectedGun = null;

    Board.prototype.shoted = false;

    function Board(cv) {
      this.canvas = document.getElementById(cv);
      this.context = this.canvas.getContext("2d");
      this.width = this.canvas.width;
      this.height = this.canvas.height;
      drawer.setOptions(this.context, {
        color: '#000',
        join: 'round'
      });
      this.guns = [];
      this.mirrors = [];
      this.obstacles = [];
      this.stars = [];
      this.guns.push(new LaserGun({
        x: this.width / 2,
        y: this.height / 2
      }, 0));
    }

    Board.prototype.shot = function(pos) {
      var star, _i, _len, _ref;
      if (this.selectedGun) {
        _ref = this.stars;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          star = _ref[_i];
          star.glow = false;
        }
        this.shoted = true;
        return this.selectedGun.shot(pos);
      }
    };

    Board.prototype.collisionEffect = function(a, gun) {
      if (a && a.type === "Mirror") {
        this.reflect(a, gun);
      }
      if (a && a.type === "Star") {
        a.glow = true;
        return gun.laser.advance();
      }
    };

    Board.prototype.recalculate = function() {
      var a, gun, star, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.guns;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gun = _ref[_i];
        if (gun.laser.path.length >= 2) {
          _ref1 = this.stars;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            star = _ref1[_j];
            star.glow = false;
          }
          gun.laser.clear(gun.position, gun.front());
          a = this.collided(gun.laser.last());
          while (!a || !(a && a.type === "Wall")) {
            gun.laser.advance(1);
            this.collisionEffect(this.collided(gun.laser.last(), gun));
          }
          _results.push(gun.laser.path[0] = gun.front());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Board.prototype.reflect = function(mirror, gun) {
      var angle, pos;
      angle = mirror.reflect(gun.laser.angle());
      pos = gun.laser.last();
      pos.x -= 20 * Math.cos(angle);
      pos.y -= 20 * Math.sin(angle);
      return gun.laser.addPoint(pos);
    };

    Board.prototype.collided = function(pos) {
      var mirror, obstacle, star, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      if (pos.x <= 0 || pos.x >= this.width || pos.y <= 0 || pos.y >= this.height) {
        return {
          type: "Wall"
        };
      }
      _ref = this.obstacles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obstacle = _ref[_i];
        if (obstacle.collided(pos)) {
          return obstacle;
        }
      }
      _ref1 = this.mirrors;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        mirror = _ref1[_j];
        if (mirror.collided(pos)) {
          return mirror;
        }
      }
      _ref2 = this.stars;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        star = _ref2[_k];
        if (star.collided(pos)) {
          return star;
        }
      }
      return null;
    };

    Board.prototype.addMirror = function(pos, angle, width) {
      if (angle == null) {
        angle = 0;
      }
      if (width == null) {
        width = 100;
      }
      return this.mirrors.push(new PlaneMirror(pos, angle, width));
    };

    Board.prototype.addStar = function(pos, radius) {
      return this.stars.push(new Star(pos, radius));
    };

    Board.prototype.addWall = function(pos, angle, width) {
      if (angle == null) {
        angle = 0;
      }
      return this.obstacles.push(new Wall(pos, angle, width));
    };

    Board.prototype.selectGun = function(pos) {
      var gun, _i, _len, _ref, _results;
      _ref = this.guns;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gun = _ref[_i];
        if (gun.collided(pos)) {
          _results.push(this.selectedGun = this.selectedGun === gun ? null : gun);
        }
      }
      return _results;
    };

    Board.prototype.draw = function() {
      var gun, mirror, obstacle, star, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _results;
      this.context.save();
      this.context.setTransform(1, 0, 0, 1, 0, 0);
      this.context.clearRect(0, 0, this.width, this.height);
      this.context.restore();
      this.context.fillRect(0, 0, this.width, this.height);
      _ref = this.mirrors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mirror = _ref[_i];
        mirror.draw(this.context);
      }
      _ref1 = this.obstacles;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        obstacle = _ref1[_j];
        obstacle.draw(this.context);
      }
      _ref2 = this.guns;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        gun = _ref2[_k];
        gun.laser.draw(this.context);
        if (this.selectedGun === gun) {
          gun.draw(this.context, true);
        } else {
          gun.draw(this.context);
        }
      }
      _ref3 = this.stars;
      _results = [];
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        star = _ref3[_l];
        _results.push(star.draw(this.context));
      }
      return _results;
    };

    Board.prototype.animate = function() {
      var coll, gun, i, m, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      _ref = this.guns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gun = _ref[_i];
        coll = this.collided(gun.laser.last());
        if (!coll && this.shoted) {
          i = 0;
          while (!coll && i < 10) {
            gun.laser.advance(1);
            i++;
            coll = this.collided(gun.laser.last());
            this.collisionEffect(coll, gun);
          }
        } else {
          if (coll) {
            this.collisionEffect(coll, gun);
          } else {
            this.shoted = false;
            this.recalculate();
          }
        }
      }
      _ref1 = this.mirrors;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        m = _ref1[_j];
        m.turn(0);
      }
      return setTimeout(function() {
        return _this.animate();
      }, 1000 / 1000);
    };

    return Board;

  })();

  Interface = (function() {
    Interface.prototype.width = 0;

    Interface.prototype.height = 0;

    Interface.prototype.context = null;

    Interface.prototype.turner = null;

    function Interface(cv) {
      var canvas;
      canvas = document.getElementById(cv);
      this.context = canvas.getContext("2d");
      this.width = canvas.width;
      this.height = canvas.height;
    }

    Interface.prototype.draw = function() {
      this.context.clearRect(0, 0, this.width, this.height);
      this.context.fillStyle = "blue";
      this.context.strokeStyle = "blue";
      if (this.turner) {
        return this.turner.draw(this.context);
      }
    };

    return Interface;

  })();

  window.onload = function() {
    var clickTimer, longPress,
      _this = this;
    window.board = new Board("board");
    window.buttons = new Interface("buttons");
    window.board.addMirror({
      x: 600,
      y: 70
    }, Math.PI / 4);
    window.board.addMirror({
      x: 200,
      y: 70
    }, Geometry.rad(325));
    window.board.addMirror({
      x: 400,
      y: 70
    }, Geometry.rad(90));
    window.board.addMirror({
      x: 200,
      y: 600 - 70
    }, Geometry.rad(225));
    window.board.addMirror({
      x: 600,
      y: 600 - 70
    }, Geometry.rad(135));
    window.board.addMirror({
      x: 400,
      y: 600 - 70
    }, Geometry.rad(180));
    window.board.addMirror({
      x: 700,
      y: 300
    }, Geometry.rad(45));
    window.board.addWall({
      x: 100,
      y: 300
    }, Geometry.rad(270), 100);
    window.board.addStar({
      x: 200,
      y: 350
    }, 10);
    window.board.animate();
    clickTimer = false;
    longPress = false;
    document.addEventListener('mousedown', function(e) {
      var pos;
      pos = {
        x: e.pageX - board.canvas.offsetLeft,
        y: e.pageY - board.canvas.offsetTop
      };
      return clickTimer = setTimeout(function() {
        var a;
        longPress = true;
        a = board.collided(pos);
        console.log(a);
        if (a) {
          return buttons.turner = new Turner(a);
        }
      }, 1000);
    });
    document.addEventListener('mouseup', function(e) {
      var pos;
      pos = {
        x: e.pageX - board.canvas.offsetLeft,
        y: e.pageY - board.canvas.offsetTop
      };
      buttons.turner = null;
      clearTimeout(clickTimer);
      if (!longPress) {
        board.shot(pos);
        board.selectGun(pos);
      }
      return longPress = false;
    });
    return requestAnimationFrame(mainLoop);
  };

  mainLoop = function() {
    var fps;
    if (typeof mainLoop.lastTime === 'undefined') {
      mainLoop.lastTime = new Date().getTime();
    } else {
      fps = 1000 / (new Date().getTime() - mainLoop.lastTime);
      document.getElementById("fps").innerHTML = fps.toFixed(2) + ' fps';
      mainLoop.lastTime = new Date().getTime();
    }
    board.draw();
    buttons.draw();
    return requestAnimationFrame(mainLoop);
  };

  window.requestAnimationFrame = (function() {
    return window.requestAnimationFrame || window.webkitrequestAnimationFrame || window.mozrequestAnimationFrame || function(cback) {
      return window.setTimeout(cback, 1000 / 60);
    };
  })();

}).call(this);
