// Generated by CoffeeScript 1.6.3
(function() {
  var ConcaveMirror, ConvexMirror, Laser, LaserGun, Mirror, PlaneMirror, Turnable, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Turnable = (function() {
    Turnable.prototype.position = null;

    Turnable.prototype.angle = 0;

    function Turnable(position, angle) {
      this.position = position != null ? position : {
        x: 0,
        y: 0
      };
      this.angle = angle != null ? angle : 0;
    }

    Turnable.prototype.turn = function(dgr) {
      this.angle += dgr;
      if (this.angle > 360) {
        this.angle -= 360;
      } else if (this.angle < 0) {
        this.angle += 360;
      }
      return this;
    };

    return Turnable;

  })();

  Mirror = (function(_super) {
    __extends(Mirror, _super);

    function Mirror() {
      _ref = Mirror.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Mirror.prototype.img = null;

    Mirror.prototype.width = 100;

    Mirror.prototype.height = 10;

    Mirror.prototype.type = "Mirror";

    return Mirror;

  })(Turnable);

  PlaneMirror = (function(_super) {
    __extends(PlaneMirror, _super);

    function PlaneMirror() {
      _ref1 = PlaneMirror.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    PlaneMirror.prototype.collided = function(point) {
      var c, rx, ry, s;
      c = Math.cos(-this.angle * Math.PI / 180);
      s = Math.sin(-this.angle * Math.PI / 180);
      rx = this.position.x + c * (point.x - this.position.x) - s * (point.y - this.position.y);
      ry = this.position.y + s * (point.x - this.position.x) + c * (point.y - this.position.y);
      return this.position.x - this.width / 2 <= rx && this.position.x + this.width / 2 >= rx && this.position.y - this.height / 2 <= ry && this.position.y + this.height / 2 >= ry;
    };

    PlaneMirror.prototype.reflect = function(point, ang) {
      if (this.collided(point)) {
        return 360 - ang - 2 * this.angle;
      }
      return null;
    };

    PlaneMirror.prototype.draw = function(context) {
      drawer.rectangle(context, "fill", this.angle, this.position, this.width, this.height, {
        color: 'black',
        shadow: {
          color: '#fff',
          offsetX: 0,
          offsetY: 0,
          blur: 10
        }
      });
      return drawer.distance(context, 45 + this.angle, this.position, 100, {
        color: 'white'
      });
    };

    return PlaneMirror;

  })(Mirror);

  ConvexMirror = (function(_super) {
    __extends(ConvexMirror, _super);

    function ConvexMirror() {
      _ref2 = ConvexMirror.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return ConvexMirror;

  })(Mirror);

  ConcaveMirror = (function(_super) {
    __extends(ConcaveMirror, _super);

    function ConcaveMirror() {
      _ref3 = ConcaveMirror.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    return ConcaveMirror;

  })(Mirror);

  LaserGun = (function(_super) {
    __extends(LaserGun, _super);

    function LaserGun() {
      _ref4 = LaserGun.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    LaserGun.prototype.radius = 30;

    LaserGun.prototype.img = null;

    LaserGun.prototype.front = function() {
      return {
        x: this.position.x + this.radius * Math.cos(this.angle * Math.PI / 180),
        y: this.position.y + this.radius * Math.sin(this.angle * Math.PI / 180)
      };
    };

    LaserGun.prototype.draw = function(context) {
      return drawer.polygon(context, "stroke", this.angle, this.position, 3, this.radius, {
        width: 1,
        color: 'white'
      });
    };

    return LaserGun;

  })(Turnable);

  Laser = (function() {
    Laser.prototype.path = null;

    function Laser(origin) {
      this.path = [];
      if (origin) {
        this.path.push(origin);
      }
    }

    Laser.prototype.addPoint = function(p) {
      return this.path.push(p);
    };

    Laser.prototype.last = function(p) {
      if (p) {
        if (this.path.length > 1) {
          this.path[this.path.length - 1] = p;
        } else {
          this.path[this.path.length] = p;
        }
      }
      return this.path[this.path.length - 1];
    };

    Laser.prototype.changeRate = function(start, end) {
      var dx, dy;
      if (start == null) {
        start = this.path.length - 2;
      }
      if (end == null) {
        end = this.path.length - 1;
      }
      if (start < 0) {
        start = this.path.length - start;
      }
      if (end < 0) {
        end = this.path.length - end;
      }
      if (start < this.path.length && end < this.path.length) {
        dx = this.path[end].x - this.path[start].x;
        dy = this.path[end].y - this.path[start].y;
        return [dx, dy];
      }
      return [];
    };

    Laser.prototype.advance = function(rate) {
      var dx, dy, pos;
      if (rate == null) {
        rate = 10;
      }
      pos = this.path[this.path.length - 1];
      if (!(dy || dx)) {
        dx = this.path[this.path.length - 1].x - this.path[this.path.length - 2].x;
        dy = this.path[this.path.length - 1].y - this.path[this.path.length - 2].y;
      }
      if (dx === 0) {
        pos.x = this.last().x;
        pos.y += dy > 0 ? rate : -rate;
      } else {
        pos.x += dx > 0 ? rate : -rate;
        pos.y += dx > 0 ? rate * dy / dx : -rate * dy / dx;
      }
      return this.last(pos);
    };

    Laser.prototype.clear = function(origin) {
      this.path = [];
      if (origin) {
        return this.path.push(origin);
      }
    };

    Laser.prototype.draw = function(context) {
      if (this.path.length > 1) {
        return drawer.path(context, this.path, {
          color: '#ddeeff',
          width: 5,
          shadow: {
            color: '#a00',
            offsetX: 0,
            offsetY: 0,
            blur: 25
          }
        });
      }
    };

    return Laser;

  })();

  window.PlaneMirror = PlaneMirror;

  window.LaserGun = LaserGun;

  window.Laser = Laser;

}).call(this);
