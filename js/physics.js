// Generated by CoffeeScript 1.6.3
(function() {
  module('Physics');

  Physics.Vector = (function() {
    Vector.prototype.origin = null;

    Vector.prototype.magnitude = 0;

    Vector.prototype.angle = 0;

    function Vector(magnitude, angle, o) {
      this.magnitude = magnitude != null ? magnitude : 0;
      this.angle = angle != null ? angle : 0;
      if (o == null) {
        o = {};
      }
      this.origin = {};
      this.origin.x = o.x || 0;
      this.origin.x = o.y || 0;
    }

    Vector.prototype.position = function() {
      return {
        x: this.magnitude * Math.cos(this.angle),
        y: this.magnitude * Math.sin(this.angle)
      };
    };

    /*
    	magnitude: (n) ->  
    		d = Geometry.distance({x: 0, y:0}, {x: @x, y: @y})
    		if n
    			d = n
    			@x = d * Math.cos(@angle())
    			@y = d * Math.sin(@angle())
    		return d
    
    	angle: (t) ->
    		a = Math.atan2(@y, @x)
    		if t
    			a = t
    			@x = @magnitude * Math.cos(a)
    			@y = @magnitude * Math.sin(a)
    		return a
    */


    return Vector;

  })();

  Physics.Optics = {
    reflec: function() {}
  };

  Physics.Collision = {
    rect: function(point, rectPos, width, height, angle) {
      var c, rx, ry, s;
      if (angle == null) {
        angle = 0;
      }
      c = Math.cos(-angle);
      s = Math.sin(-angle);
      rx = rectPos.x + c * (point.x - rectPos.x) - s * (point.y - rectPos.y);
      ry = rectPos.y + s * (point.x - rectPos.x) + c * (point.y - rectPos.y);
      return rectPos.x - width / 2 <= rx && rectPos.x + width / 2 >= rx && rectPos.y - height / 2 <= ry && rectPos.y + height / 2 >= ry;
    },
    circle: function(point, center, radius) {
      return Geometry.dist2(center, point) <= radius * radius;
    }
  };

}).call(this);
