// Generated by CoffeeScript 1.6.3
(function() {
  var LaserGun, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module('Laser');

  LaserGun = (function(_super) {
    __extends(LaserGun, _super);

    LaserGun.prototype.radius = 30;

    LaserGun.prototype.laser = null;

    LaserGun.prototype.img = null;

    function LaserGun(pos, angle, turnable, laser_t) {
      if (pos == null) {
        pos = {
          x: 0,
          y: 0
        };
      }
      this.angle = angle != null ? angle : 0;
      this.turnable = turnable != null ? turnable : true;
      this.position = {
        x: pos.x,
        y: pos.y
      };
      console.log(laser_t);
      this.laser = (function() {
        switch (laser_t) {
          case "short":
            return new Laser.Short;
          default:
            return new Laser.Long;
        }
      })();
    }

    LaserGun.prototype.front = function() {
      return {
        x: this.position.x + this.radius * Math.cos(this.angle),
        y: this.position.y + this.radius * Math.sin(this.angle)
      };
    };

    LaserGun.prototype.shot = function(pos) {
      var dx, dy;
      if (this.turnable) {
        dy = pos.y - this.position.y;
        dx = pos.x - this.position.x;
        this.angle = Math.atan2(dy, dx);
        console.log(this.angle * 180 / Math.PI, dy / dx);
      }
      return this.laser.shot(this.front(), this.angle);
    };

    LaserGun.prototype.turnTo = function(dgr) {
      LaserGun.__super__.turnTo.call(this, dgr);
      return this.laser.restart(this.front(), this.angle);
    };

    LaserGun.prototype.collided = function(p) {
      return Physics.Collision.circle(p, this.position, this.radius);
    };

    LaserGun.prototype.draw = function(context, selected) {
      var color;
      color = '#ffffff';
      if (selected) {
        color = '#ff0000';
      }
      return drawer.polygon(context, "stroke", this.angle, this.position, 3, this.radius, {
        width: 1,
        color: color
      });
    };

    return LaserGun;

  })(Geometry.Turnable);

  Laser.Base = (function() {
    Base.prototype.path = null;

    Base.prototype.color = null;

    Base.prototype.velocity = 0;

    function Base() {
      this.path = [];
      this.color = {
        r: 255,
        g: 255,
        b: 255
      };
      this.velocity = 3;
    }

    Base.prototype.angle = function() {
      return this.path[this.path.length - 1].angle;
    };

    Base.prototype.clear = function() {
      return this.path = [];
    };

    Base.prototype.last = function() {
      if (this.path.length) {
        return this.path[this.path.length - 1].position();
      }
    };

    Base.prototype.shot = function(p, angle) {
      this.clear();
      return this.addPoint(p, angle);
    };

    Base.prototype.advance = function() {};

    Base.prototype.addPoint = function() {};

    Base.prototype.draw = function() {};

    return Base;

  })();

  Laser.Long = (function(_super) {
    __extends(Long, _super);

    function Long() {
      _ref = Long.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Long.prototype.addPoint = function(p, angle) {
      return this.path.push(new Physics.Vector(this.velocity + 1, angle, p));
    };

    Long.prototype.advance = function() {
      if (this.path.length) {
        return this.path[this.path.length - 1].magnitude += this.velocity;
      }
    };

    Long.prototype.reflect = function(angle) {
      if (this.path.length) {
        return this.path.push(new Physics.Vector(this.velocity + 1, angle, this.path[this.path.length - 1].position()));
      }
    };

    Long.prototype.restart = function(p, angle) {
      var q;
      if (this.path.length) {
        q = new Physics.Vector(0, angle, {
          x: p.x,
          y: p.y
        });
        q.magnitude = this.path[0].magnitude;
        this.path = [];
        return this.path[0] = q;
      }
    };

    Long.prototype.draw = function(context) {
      var color, i, lineWidth, _i, _results;
      if (this.path.length) {
        _results = [];
        for (i = _i = 5; _i >= 0; i = --_i) {
          lineWidth = (i + 1) * 4 - 2;
          color = i === 0 ? '#fff' : "rgba(" + this.color.r + ", " + this.color.g + ", " + this.color.b + ", 0.2)";
          _results.push(drawer.path(context, this.path, {
            color: color,
            width: lineWidth
          }));
        }
        return _results;
      }
    };

    return Long;

  })(Laser.Base);

  Laser.Short = (function(_super) {
    __extends(Short, _super);

    Short.prototype.size = 0;

    function Short(size) {
      this.size = size != null ? size : 20;
      Short.__super__.constructor.apply(this, arguments);
    }

    Short.prototype.addPoint = function(p, angle) {
      this.path = [];
      return this.path.push(new Physics.Vector(this.size, angle, p));
    };

    Short.prototype.advance = function() {
      var ray, _i, _len, _ref1, _results;
      _ref1 = this.path;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        ray = _ref1[_i];
        ray.origin.x += this.velocity * Math.cos(ray.angle);
        _results.push(ray.origin.y += this.velocity * Math.sin(ray.angle));
      }
      return _results;
    };

    Short.prototype.restart = function() {};

    Short.prototype.reflect = function(angle) {
      if (this.path.length) {
        return this.path.push(new Physics.Vector(this.size, angle, this.path[this.path.length - 1].position()));
      }
    };

    Short.prototype.draw = function(context) {
      var color, i, lineWidth, ray, _i, _len, _ref1, _results;
      _ref1 = this.path;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        ray = _ref1[_i];
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (i = _j = 5; _j >= 0; i = --_j) {
            lineWidth = (i + 1) * 4 - 2;
            color = i === 0 ? '#fff' : "rgba(" + this.color.r + ", " + this.color.g + ", " + this.color.b + ", 0.2)";
            _results1.push(drawer.line(context, ray.origin, ray.position(), {
              color: color,
              width: lineWidth
            }));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return Short;

  })(Laser.Base);

  window.LaserGun = LaserGun;

}).call(this);
